using DMS.Module.Map.Demo;
using DMS.Module.Map.Infrastructure;
using Newtonsoft.Json;
using Prism.Commands;
using PrismWPF.Common;
using System;
using System.Data;
using System.Windows;
using System.Windows.Controls;
using uPLibrary.Networking.M2Mqtt.Messages;

namespace DMS.Module.Map.ViewModel.Component
{
    public class CP_DataGridViewModel : CP_CommonBaseViewModel
    {
        public override void Load()
        {
            base.Load();

            SetMqttChannel();
        }

        public override void Unload()
        {
            base.Unload();
        }

        protected override void OnComponentData()
        {
            if (DmComponentM.PropertyM.CategoryCode == "0" || 
                DmComponentM.PropertyM.CategoryCode == null)
            {
                Demo_ChartData chartSampleData = new Demo_ChartData();
                DmComponentM.DataGridList = chartSampleData.SetDataGridData();
            }
        }

        protected override void OnSubscribeAsyncMqtt(MqttMsgPublishEventArgs e)
        {
            try
            {
                base.OnSubscribeAsyncMqtt(e);

                DataTable data = JsonConvert.DeserializeObject<DataTable>(TopicMessage);

                if (data == null)
                {
                    return;
                }

                DmComponentM.DataGridList = data;
            }
            catch (Exception ex)
            {
                LogManager.Instance.WriteLine(LOG.LOG, LOG_LEVEL.ErrorLevel, "DataGrid MQTT:" + ex.ToString());
            }
        }

        public DelegateCommand<DataGrid> AutoGeneratedColumnsCommand => new DelegateCommand<DataGrid>(AutoGeneratedColumnsCommandExecute);
        public DelegateCommand<DataGridAutoGeneratingColumnEventArgs> AutoGeneratingColumnCommand => new DelegateCommand<DataGridAutoGeneratingColumnEventArgs>(AutoGeneratingColumnCommandExecute);

        public DelegateCommand<DataGridRowEventArgs> LoadingRowCommand => new DelegateCommand<DataGridRowEventArgs>(LoadingRowCommandExecute);

        private void AutoGeneratedColumnsCommandExecute(DataGrid sender)
        {
            DataGrid dataGrid = sender;
            bool existFlag = false;

            if (dataGrid.Items.Count <= 0)
            {
                return;
            }

            foreach (DataGridColumn item in dataGrid.Columns)
            {
                if (item.Header == null)
                {
                    continue;
                }

                if (item.Header.ToString() == "이상이력")
                {
                    item.Visibility = Visibility.Hidden;
                    existFlag = true;
                }
            }

            if (existFlag == true)
            {
                dataGrid.Columns[0].Visibility = Visibility.Visible;
            }
            else
            {
                dataGrid.Columns[0].Visibility = Visibility.Collapsed;
            }

            existFlag = false;
            dataGrid.Columns[dataGrid.Columns.Count - 1].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
        }

        private void AutoGeneratingColumnCommandExecute(DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyType == typeof(System.Int16) ||
                e.PropertyType == typeof(System.Int32) ||
                e.PropertyType == typeof(System.Int64) ||
                e.PropertyType == typeof(System.Double))
            {
                (e.Column as DataGridTextColumn).Binding.StringFormat = "{0:#,##0}";
            }
        }

        private void LoadingRowCommandExecute(DataGridRowEventArgs e)
        {
            e.Row.Header = (e.Row.GetIndex() + 1).ToString();
        }
    }
}
