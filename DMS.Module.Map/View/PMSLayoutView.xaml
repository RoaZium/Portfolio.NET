<UserControl x:Class="DMS.Module.Map.View.PMSLayoutView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:extensions="clr-namespace:PrismWPF.Control;assembly=PrismWPF.Control"
             xmlns:converters="clr-namespace:PrismWPF.Common.Converter;assembly=PrismWPF.Common"
             xmlns:prism="http://prismlibrary.com/"
             xmlns:enums="clr-namespace:DMS.Module.Map.Infrastructure"
             xmlns:mstatic="clr-namespace:DMS.Module.Map.ViewModel"
             extensions:VisibleExtension.IsBind="True"
             xmlns:res="clr-namespace:DMS.Module.Map.Properties"
             xmlns:core_extensions="clr-namespace:Coever.Lib.WPF.Core.Controls.Extension;assembly=Coever.Lib.WPF.Core"
             mc:Ignorable="d" Loaded="UserControl_Loaded" Unloaded="UserControl_Unloaded"
             x:Name="xMapMain">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/DMS.Module.Map;component/Global.xaml"/>
            </ResourceDictionary.MergedDictionaries>


            <converters:SingleChainConverter x:Key="SeparatorVisibilityConverter">
                <converters:SingleIsEqureConverter/>
                <converters:SingleInverseBooleanConverter/>
                <BooleanToVisibilityConverter/>
            </converters:SingleChainConverter>

            <ContextMenu x:Key="EditModeContextMenu">
                <MenuItem
                    Header="{x:Static res:Res.StrRemove}" Tag="{x:Static enums:Arrange.Remove}"
                    Command="{Binding PlacementTarget.Tag.EditMenuClickedCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}" 
                    CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                </MenuItem>
                <MenuItem Header="{x:Static res:Res.StrArrange}">
                    <MenuItem
                        Header="{x:Static res:Res.StrBringToFront}" Tag="{x:Static enums:Arrange.BringToFront}"
                        Command="{Binding PlacementTarget.Tag.EditMenuClickedCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}}" >
                    </MenuItem>
                    <MenuItem
                        Header="{x:Static res:Res.StrBringForward}" Tag="{x:Static enums:Arrange.BringForward}"
                        Command="{Binding PlacementTarget.Tag.EditMenuClickedCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}" 
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}}" >
                    </MenuItem>
                    <MenuItem
                        Header="{x:Static res:Res.StrSendToBack}" Tag="{x:Static enums:Arrange.SendToBack}"
                        Command="{Binding PlacementTarget.Tag.EditMenuClickedCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}" 
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}}" >
                    </MenuItem>
                    <MenuItem
                        Header="{x:Static res:Res.StrSendBackward}" Tag="{x:Static enums:Arrange.SendBackward}"
                        Command="{Binding PlacementTarget.Tag.EditMenuClickedCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Self}}" >
                    </MenuItem>
                </MenuItem>
            </ContextMenu>
        </ResourceDictionary>

    </UserControl.Resources>

    <Grid Style="{DynamicResource sLayoutGrid}">
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="MouseLeftButtonUp">
                <i:InvokeCommandAction Command="{Binding MouseLeftButtonUpCommand}"/>
            </i:EventTrigger>
        </i:Interaction.Triggers>
        <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
            <ItemsControl ItemsSource="{Binding VMList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Background="{Binding DmComponentM.PropertyM.LayoutBackground}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid core_extensions:ZoomExtension.Zoom="{Binding DmComponentM.PropertyM.Zoom}" /> 
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemContainerStyle>
                    <Style>
                        <Setter Property="Control.MinHeight" Value="1"/>
                        <Setter Property="Control.MinWidth" Value="1"/>
                        <Setter Property="Control.HorizontalAlignment" Value="Left"/>
                        <Setter Property="Control.VerticalAlignment" Value="Top"/>
                        <Setter Property="Control.SnapsToDevicePixels" Value="False"/>
                        <Setter Property="Control.Width" Value="{Binding DmComponentM.Width, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <Setter Property="Control.Height" Value="{Binding DmComponentM.Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <Setter Property="Control.Margin" Value="{Binding DmComponentM.Margin, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <Setter Property="extensions:EditModeExtension.ContextMenu" Value="{StaticResource EditModeContextMenu}"/>
                        <Setter Property="Control.Tag" Value="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}}"/>
                    </Style>
                </ItemsControl.ItemContainerStyle>
            </ItemsControl>
        </ScrollViewer>

        <Grid HorizontalAlignment="Right"
              Margin="0,30,0,0"
              VerticalAlignment="Top"
              Visibility="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit, Converter={StaticResource xBooleanToCollapsedConverter}, ConverterParameter=1}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="100" />
                <ColumnDefinition Width="50" />
            </Grid.ColumnDefinitions>

            <Slider Grid.Column="0" 
                    Style="{StaticResource xSlider_Zoom}"
                    Value="{Binding DmComponentM.PropertyM.Zoom}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="ValueChanged">
                        <i:InvokeCommandAction Command="{Binding ZoomValueChagedCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Slider>

            <TextBlock Grid.Column="1" 
                       Style="{StaticResource FontSize14TextBlock}"
                       Text="{Binding DmComponentM.PropertyM.Zoom, StringFormat=P0}">
            </TextBlock>
        </Grid>
    </Grid>
</UserControl>