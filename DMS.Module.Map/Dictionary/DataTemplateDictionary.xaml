<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:prism="http://prismlibrary.com/"
                    xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
                    xmlns:dxga="http://schemas.devexpress.com/winfx/2008/xaml/gauges"
                    xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:core_extensions="clr-namespace:Coever.Lib.WPF.Core.Controls.Extension;assembly=Coever.Lib.WPF.Core"
                    xmlns:res="clr-namespace:DMS.Module.Map.Properties"
                    xmlns:control="clr-namespace:DMS.Module.Map.View"
                    xmlns:mstatic="clr-namespace:DMS.Module.Map.ViewModel"
                    xmlns:vm="clr-namespace:DMS.Module.Map.ViewModel.Component"
                    xmlns:converters="clr-namespace:PrismWPF.Common.Converter;assembly=PrismWPF.Common"
                    xmlns:extensions="clr-namespace:PrismWPF.Control;assembly=PrismWPF.Control">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ControlStyleDictionary.xaml"/>
        <ResourceDictionary Source="DevExpress/DevExpressStyleDictionary.xaml"/>
        <ResourceDictionary Source="../Resource/Blue/ImageResourceDictionary.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <converters:SingleChainConverter x:Key="LimitVisibleConverter">
        <converters:SingleIsEqureConverter/>
        <converters:SingleInverseBooleanConverter/>
    </converters:SingleChainConverter>

    <!--이미지(완료)-->
    <DataTemplate DataType="{x:Type vm:CP_ImageViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Image Style="{StaticResource xImage_ImageComponent}" />

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--비디오-->
    <DataTemplate DataType="{x:Type vm:CP_VideoViewMode}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <MediaElement Style="{StaticResource xMediaElementBase}"
                          Source="{Binding DmComponentM.PropertyM.FilePath}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MediaEnded">
                        <prism:InvokeCommandAction Command="{Binding MediaEndedCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type MediaElement}}}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </MediaElement>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>
    
    <!--텍스트 박스(완료)-->
    <DataTemplate DataType="{x:Type vm:CP_TextBoxViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Border Style="{StaticResource xTextBoxBorderTemplate01}" >
                <TextBlock Style="{StaticResource xTextBoxTextBlockTemplate01}"/>
            </Border>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--데이터 박스(완료)-->
    <DataTemplate DataType="{x:Type vm:CP_DataBoxViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Border Style="{StaticResource xDataBoxBorderTemplate01}">
                <TextBlock Style="{StaticResource xDataBoxTextBlockTemplate01}" />
            </Border>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--게이지-->
    <DataTemplate DataType="{x:Type vm:CP_GaugeViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Border Style="{StaticResource xGaugeBorderTemplate}" >
                <Grid Background="{x:Null}">
                    <!--배경-->
                    <ed:Arc Style="{StaticResource xGaugeBackgroundTemplate}" />
                    <!--표출 값-->
                    <ed:Arc Style="{StaticResource xGaugeFillTemplate}" />
                    <!--값-->
                    <Label Style="{StaticResource xGaugeTotalValueLabel}" />
                    <!--Start-->
                    <Label Style="{StaticResource xGaugeStartLabelTemplate}" />
                    <!--End-->
                    <Label Style="{StaticResource xGaugeEndLabelBorderTemplate}" />
                </Grid>
            </Border>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>
    
    <!--진행 표시줄-->
    <DataTemplate DataType="{x:Type vm:CP_ProgressBarViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <ProgressBar Style="{StaticResource xProgressBarTemplate}"/>
            <TextBlock Style="{StaticResource xProgressbarTextBlock}"/>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--이동-->
    <DataTemplate DataType="{x:Type vm:CP_MoveViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Button Style="{StaticResource xMoveButtonTemplate}" Command="{Binding MoveCommand}" />

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--Streaming-->
    <DataTemplate DataType="{x:Type vm:CP_StreamingViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Border BorderThickness="1" BorderBrush="MintCream">
                <Grid>
                    <Image Style="{StaticResource xImage_StreamingComponent}">
                        <Image.RenderTransform>
                            <RotateTransform Angle="{Binding DmComponentM.PropertyM.PlaybackM.Rotation}"/>
                        </Image.RenderTransform>
                    </Image>

                    <Grid Style="{StaticResource sGrid02}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!--재생/일시중지/일시정지-->
                        <Grid Grid.Row="2" Style="{StaticResource sGrid03}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="1"/>
                            </Grid.ColumnDefinitions>

                            <ToggleButton Grid.Column="2"
                                  Style="{StaticResource sRoundImageToggleButton}"
                                  IsChecked="{Binding IsPlayState}" 
                                  Command="{Binding PlayCommand}">
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}">
                                            <Setter Property="Source" Value="{StaticResource xblack_controlbar_playDrawingImageDrawingImage}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsPlayState}" Value="true">
                                                    <Setter Property="Source" Value="{StaticResource xblack_controlbar_stopDrawingImageDrawingImage}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsPlayState}" Value="false">
                                                    <Setter Property="Source" Value="{StaticResource xblack_controlbar_playDrawingImageDrawingImage}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </ToggleButton>
                        </Grid>
                    </Grid>
                </Grid>
            </Border>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>
    
    <!--Auto Mode(완료)-->
    <DataTemplate DataType="{x:Type vm:CP_AutoModeViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Border Style="{StaticResource xBorder_AutoModeBorder}">
                <Grid>
                    <ItemsControl ItemsSource="{Binding Workspace}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Grid core_extensions:ZoomExtension.Zoom="{Binding DmComponentM.PropertyM.AutoModeM.Zoom}" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style>
                                <Setter Property="Control.Visibility" Value="{Binding DmComponentM.IsVisible}" />
                                <Setter Property="Control.HorizontalAlignment" Value="Left"/>
                                <Setter Property="Control.VerticalAlignment" Value="Top"/>
                                <Setter Property="Control.Margin" Value="0" />
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type UserControl}">
                                            <ContentPresenter Content="{TemplateBinding Content}"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                    </ItemsControl>

                    <ToggleButton Style="{StaticResource xToggleButton_AutoModePlay}" 
                          IsChecked="{Binding IsScenarioMode}"
                          Command="{Binding PlayCommand}">
                        <Image Style="{StaticResource xImage_AutoModePlay}" />
                    </ToggleButton>
                </Grid>
            </Border>
            
            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--BarSeriesChart(완료)-->
    <DataTemplate DataType="{x:Type vm:CP_BarSeriesChartViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <dxc:ChartControl Style="{StaticResource sChartControlBase}">
                <dxc:ChartControl.Diagram>
                    <dxc:XYDiagram2D Style="{StaticResource sXYDiagram2DBase}">
                        <dxc:XYDiagram2D.SeriesTemplate>
                            <dxc:BarSideBySideSeries2D Style="{StaticResource sBarSideBySideSeries2DBase}" >
                                <dxc:BarSideBySideSeries2D.Label>
                                    <dxc:SeriesLabel Style="{StaticResource sBarSideBySideSeries2DSeriesLabelBase}" />
                                </dxc:BarSideBySideSeries2D.Label>
                            </dxc:BarSideBySideSeries2D>
                        </dxc:XYDiagram2D.SeriesTemplate>
                        <dxc:XYDiagram2D.DefaultPane>
                            <dxc:Pane Style="{StaticResource sPaneBase}" />
                        </dxc:XYDiagram2D.DefaultPane>
                        <dxc:XYDiagram2D.AxisX>
                            <dxc:AxisX2D Style="{StaticResource sAxisX2DBase}">
                                <dxc:AxisX2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisXLabelBase}"/>
                                </dxc:AxisX2D.Label>
                                <dxc:AxisX2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisXTitleBase}" />
                                </dxc:AxisX2D.Title>
                                <dxc:AxisX2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisXRangeBase}"/>
                                </dxc:AxisX2D.WholeRange>
                            </dxc:AxisX2D>
                        </dxc:XYDiagram2D.AxisX>
                        <dxc:XYDiagram2D.AxisY>
                            <dxc:AxisY2D Style="{StaticResource sAxisY2DBase}">
                                <dxc:AxisY2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisYLabelBase}"/>
                                </dxc:AxisY2D.Label>
                                <dxc:AxisY2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisYTitleBase}" />
                                </dxc:AxisY2D.Title>
                                <dxc:AxisY2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisYRangeBase}" />
                                </dxc:AxisY2D.WholeRange>
                            </dxc:AxisY2D>
                        </dxc:XYDiagram2D.AxisY>
                    </dxc:XYDiagram2D>
                </dxc:ChartControl.Diagram>
                <dxc:ChartControl.Legend>
                    <dxc:Legend Style="{StaticResource sLegendBase}" />
                </dxc:ChartControl.Legend>
                <dxc:ChartControl.Titles>
                    <dxc:Title Style="{StaticResource sTitleBase}"/>
                </dxc:ChartControl.Titles>
            </dxc:ChartControl>
            
            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--LineSeriesChar(완료)-->
    <DataTemplate DataType="{x:Type vm:CP_LineSeriesChartViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <dxc:ChartControl Style="{StaticResource sChartControlBase}" >
                <dxc:ChartControl.Diagram>
                    <dxc:XYDiagram2D Style="{StaticResource sXYDiagram2DBase}" >
                        <dxc:XYDiagram2D.AxisX>
                            <dxc:AxisX2D Style="{StaticResource sAxisX2DBase}" >
                                <dxc:AxisX2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisXLabelBase}" />
                                </dxc:AxisX2D.Label>
                                <dxc:AxisX2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisXTitleBase}" />
                                </dxc:AxisX2D.Title>
                                <dxc:AxisX2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisXRangeBase}"/>
                                </dxc:AxisX2D.WholeRange>
                            </dxc:AxisX2D>
                        </dxc:XYDiagram2D.AxisX>
                        <dxc:XYDiagram2D.AxisY>
                            <dxc:AxisY2D Style="{StaticResource sAxisY2DBase}">
                                <dxc:AxisY2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisYLabelBase}" />
                                </dxc:AxisY2D.Label>
                                <dxc:AxisY2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisYTitleBase}" />
                                </dxc:AxisY2D.Title>
                                <dxc:AxisY2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisYRangeBase}" />
                                </dxc:AxisY2D.WholeRange>
                            </dxc:AxisY2D>
                        </dxc:XYDiagram2D.AxisY>
                        <dxc:XYDiagram2D.DefaultPane>
                            <dxc:Pane Style="{StaticResource sPaneBase}" />
                        </dxc:XYDiagram2D.DefaultPane>
                        <dxc:XYDiagram2D.SeriesTemplate>
                            <dxc:LineSeries2D Style="{StaticResource sLineSeries2DBase}">
                                <dxc:LineSeries2D.Label>
                                    <dxc:SeriesLabel Style="{StaticResource sSeriesLabelBase}" />
                                </dxc:LineSeries2D.Label>
                            </dxc:LineSeries2D>
                        </dxc:XYDiagram2D.SeriesTemplate>
                    </dxc:XYDiagram2D>
                </dxc:ChartControl.Diagram>
                <dxc:ChartControl.Legend>
                    <dxc:Legend Style="{StaticResource sLegendBase}" />
                </dxc:ChartControl.Legend>
                <dxc:ChartControl.Titles>
                    <dxc:Title Style="{StaticResource sTitleBase}"/>
                </dxc:ChartControl.Titles>
            </dxc:ChartControl>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--GIF-->
    <DataTemplate DataType="{x:Type vm:CP_GifViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Image Style="{StaticResource xImage_GifComponent}" />
            
            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--이미지 뷰어-->
    <DataTemplate DataType="{x:Type vm:CP_ImageViewerViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <ScrollViewer HorizontalScrollBarVisibility="{Binding DmComponentM.PropertyM.ImageViewerM.HorizontalScrollBarVisibility}" 
                          VerticalScrollBarVisibility="{Binding DmComponentM.PropertyM.ImageViewerM.VerticalScrollBarVisibility}">
                <Canvas Width="{Binding ActualWidth, ElementName=image}" 
                        Height="{Binding ActualHeight, ElementName=image}">
                    <Canvas.Background>
                        <VisualBrush  >
                            <VisualBrush.Visual>
                                <Image x:Name="image"
                                       Source="{Binding DmComponentM.PropertyM.ImageSource}" Stretch="Fill" />
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </Canvas.Background>
                    <Canvas.LayoutTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="{Binding DmComponentM.PropertyM.ImageViewerM.ScaleX}" 
                                    ScaleY="{Binding DmComponentM.PropertyM.ImageViewerM.ScaleY}"/>
                        </TransformGroup>
                    </Canvas.LayoutTransform>
                </Canvas>
            </ScrollViewer>
            
            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--Indicator-->
    <DataTemplate DataType="{x:Type vm:CP_IndicatorViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <dxga:LinearGaugeControl Grid.Row="2"
                             Background="{Binding Template}"
                             EnableAnimation="True"
                             IsEnabled="False">
                <dxga:LinearGaugeControl.Layers>
                    <dxga:LinearGaugeLayer/>
                </dxga:LinearGaugeControl.Layers>
                <dxga:LinearGaugeControl.Model>
                    <dxga:LinearEcoModel/>
                </dxga:LinearGaugeControl.Model>
                <dxga:LinearGaugeControl.Scales>
                    <dxga:LinearScale>
                        <dxga:LinearScale.Markers>
                            <dxga:LinearScaleMarker IsInteractive="True" 
                                            Value="{Binding DmComponentM.PropertyM.TextContent}"/>
                        </dxga:LinearScale.Markers>
                        <dxga:LinearScale.CustomElements>
                            <dxga:ScaleCustomElement HorizontalAlignment="Center" VerticalAlignment="Top" FontSize="14">
                                <!--<TextBlock Text="°C"/>-->
                            </dxga:ScaleCustomElement>
                        </dxga:LinearScale.CustomElements>
                    </dxga:LinearScale>
                </dxga:LinearGaugeControl.Scales>
            </dxga:LinearGaugeControl>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--레이아웃-->
    <DataTemplate DataType="{x:Type vm:CP_LayoutViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Border BorderBrush="{Binding DmComponentM.PropertyM.LayoutM.BorderBrush}" 
                    BorderThickness="{Binding DmComponentM.PropertyM.LayoutM.BorderThickness}"
                    Opacity="{Binding DmComponentM.PropertyM.LayoutM.Opacity}">
                <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                    <ItemsControl ItemsSource="{Binding VMList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              Background="{Binding DmComponentM.PropertyM.LayoutM.Background}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Grid core_extensions:ZoomExtension.Zoom="{Binding DmComponentM.PropertyM.LayoutM.Zoom}" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style>
                                <Setter Property="Control.MinHeight" Value="1"/>
                                <Setter Property="Control.MinWidth" Value="1"/>
                                <Setter Property="Control.HorizontalAlignment" Value="Left"/>
                                <Setter Property="Control.VerticalAlignment" Value="Top"/>
                                <Setter Property="Control.SnapsToDevicePixels" Value="False"/>
                                <Setter Property="Control.Width" Value="{Binding DmComponentM.Width, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Setter Property="Control.Height" Value="{Binding DmComponentM.Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Setter Property="Control.Margin" Value="{Binding DmComponentM.Margin, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Setter Property="Control.Tag" Value="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}}"/>
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="UserControl">
                                            <Grid>
                                                <!-- Component Data -->
                                                <ContentPresenter Content="{TemplateBinding Content}"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                    </ItemsControl>
                </ScrollViewer>
            </Border>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--선형 차트-->
    <DataTemplate DataType="{x:Type vm:CP_LineGraphViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <dxc:ChartControl Style="{StaticResource sChartControlBase}">
                <dxc:ChartControl.Diagram>
                    <dxc:XYDiagram2D Style="{StaticResource sXYDiagram2DBase}">
                        <dxc:XYDiagram2D.AxisX>
                            <dxc:AxisX2D Style="{StaticResource sAxisX2DBase}">
                                <dxc:AxisX2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisXTitleBase}"/>
                                </dxc:AxisX2D.Title>
                                <dxc:AxisX2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisXLabelBase}" />
                                </dxc:AxisX2D.Label>
                                <dxc:AxisX2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisXRangeBase}"/>
                                </dxc:AxisX2D.WholeRange>
                            </dxc:AxisX2D>
                        </dxc:XYDiagram2D.AxisX>
                        <dxc:XYDiagram2D.AxisY>
                            <dxc:AxisY2D Style="{StaticResource sAxisY2DBase}">
                                <dxc:AxisY2D.CustomLabels>
                                    <dxc:CustomAxisLabel dxc:AxisY2D.AlwaysShowZeroLevel="False"
                                                 Value="{Binding DmComponentM.PropertyM.TextContent}">
                                        <TextBlock Style="{StaticResource FontSize14TextBlock}" 
                                           Text="{Binding Value}">
                                        </TextBlock>
                                    </dxc:CustomAxisLabel>
                                </dxc:AxisY2D.CustomLabels>
                                <dxc:AxisY2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisYLabelBase}" />
                                </dxc:AxisY2D.Label>
                                <dxc:AxisY2D.Strips>
                                    <dxc:Strip x:Name="MLimitStrip"
                                       Visible="{Binding DmComponentM.ResourceM.MLimitHigh, Converter={StaticResource LimitVisibleConverter}}"
                                       LegendText="{x:Static res:Res.StrControlLimit}"
                                       MinLimit="{Binding DmComponentM.ResourceM.MLimitHigh}"
                                       MaxLimit="{Binding DmComponentM.ResourceM.MLimitHigh}"
                                       BorderColor="Orange">
                                    </dxc:Strip>
                                    <dxc:Strip Visible="{Binding Visible, ElementName=MLimitStrip}"
                                       CheckedInLegend="{Binding CheckedInLegend, ElementName=MLimitStrip}"
                                       MaxLimit="{Binding DmComponentM.ResourceM.MLimitLow}"
                                       MinLimit="{Binding DmComponentM.ResourceM.MLimitLow}"
                                       BorderColor="Orange">
                                    </dxc:Strip>
                                    <dxc:Strip x:Name="LimitStrip"
                                       Visible="{Binding DmComponentM.ResourceM.LimitHigh, Converter={StaticResource LimitVisibleConverter}}"
                                       LegendText="{x:Static res:Res.StrLimit}"
                                       MaxLimit="{Binding DmComponentM.ResourceM.LimitHigh}"
                                       MinLimit="{Binding DmComponentM.ResourceM.LimitHigh}"
                                       BorderColor="Red">
                                    </dxc:Strip>
                                    <dxc:Strip Visible="{Binding Visible, ElementName=LimitStrip}"
                                       CheckedInLegend="{Binding CheckedInLegend, ElementName=LimitStrip}"
                                       MaxLimit="{Binding DmComponentM.ResourceM.LimitLow}"
                                       MinLimit="{Binding DmComponentM.ResourceM.LimitLow}"
                                       BorderColor="Red" >
                                    </dxc:Strip>
                                </dxc:AxisY2D.Strips>
                                <dxc:AxisY2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisYTitleBase}"/>
                                </dxc:AxisY2D.Title>
                                <dxc:AxisY2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisYRangeBase}" />
                                </dxc:AxisY2D.WholeRange>
                            </dxc:AxisY2D>
                        </dxc:XYDiagram2D.AxisY>
                        <dxc:XYDiagram2D.DefaultPane>
                            <dxc:Pane Style="{StaticResource sPaneBase}" />
                        </dxc:XYDiagram2D.DefaultPane>
                        <dxc:LineSeries2D Style="{StaticResource sLineSeries2DBase}" 
                                  DisplayName="{x:Static res:Res.StrValue}" >
                            <dxc:LineSeries2D.MarkerModel>
                                <dxc:RingMarker2DModel />
                            </dxc:LineSeries2D.MarkerModel>
                        </dxc:LineSeries2D>
                    </dxc:XYDiagram2D>
                </dxc:ChartControl.Diagram>
                <dxc:ChartControl.Legend>
                    <dxc:Legend Style="{StaticResource sLegendBase}" />
                </dxc:ChartControl.Legend>
                <dxc:ChartControl.Titles>
                    <dxc:Title Style="{StaticResource sTitleBase}" />
                </dxc:ChartControl.Titles>
            </dxc:ChartControl>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--중첩 도넛 차트-->
    <DataTemplate DataType="{x:Type vm:CP_NestedDonutSeriesViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <dxc:ChartControl Style="{StaticResource sChartControlBase}">
                <dxc:ChartControl.Diagram>
                    <dxc:SimpleDiagram2D Style="{StaticResource sSimpleDiagram2D}">
                        <dxc:SimpleDiagram2D.SeriesTemplate>
                            <dxc:NestedDonutSeries2D Style="{StaticResource sNestedDonutSeries2DBase}">
                                <dxc:NestedDonutSeries2D.Label>
                                    <dxc:SeriesLabel Style="{StaticResource sSeriesLabelBase}"/>
                                </dxc:NestedDonutSeries2D.Label>
                            </dxc:NestedDonutSeries2D>
                        </dxc:SimpleDiagram2D.SeriesTemplate>
                    </dxc:SimpleDiagram2D>
                </dxc:ChartControl.Diagram>
                <dxc:ChartControl.Legend>
                    <dxc:Legend Style="{StaticResource sLegendBase}"/>
                </dxc:ChartControl.Legend>
                <dxc:ChartControl.Titles>
                    <dxc:Title Style="{StaticResource sTitleBase}"/>
                </dxc:ChartControl.Titles>
            </dxc:ChartControl>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--Pareto 차트-->
    <DataTemplate DataType="{x:Type vm:CP_ParetoChartViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <dxc:ChartControl Style="{StaticResource sChartControlBase}">
                <dxc:ChartControl.Diagram>
                    <dxc:XYDiagram2D Style="{StaticResource sXYDiagram2DBase}">
                        <dxc:XYDiagram2D.DefaultPane>
                            <dxc:Pane Style="{StaticResource sPaneBase}" />
                        </dxc:XYDiagram2D.DefaultPane>
                        <dxc:XYDiagram2D.AxisX>
                            <dxc:AxisX2D Style="{StaticResource sAxisX2DBase}">
                                <dxc:AxisX2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisXLabelBase}" />
                                </dxc:AxisX2D.Label>
                                <dxc:AxisX2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisXTitleBase}" />
                                </dxc:AxisX2D.Title>
                                <dxc:AxisX2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisXRangeBase}" />
                                </dxc:AxisX2D.WholeRange>
                            </dxc:AxisX2D>
                        </dxc:XYDiagram2D.AxisX>
                        <dxc:XYDiagram2D.AxisY>
                            <dxc:AxisY2D Style="{StaticResource sAxisY2DBase}">
                                <dxc:AxisY2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisYLabelBase}" />
                                </dxc:AxisY2D.Label>
                                <dxc:AxisY2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisYTitleBase}"/>
                                </dxc:AxisY2D.Title>
                                <dxc:AxisY2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisYRangeBase}" />
                                </dxc:AxisY2D.WholeRange>
                            </dxc:AxisY2D>
                        </dxc:XYDiagram2D.AxisY>
                        <dxc:XYDiagram2D.Series>
                            <dxc:LineSeries2D Style="{StaticResource sLineSeries2DBase}"
                                      DataSource="{Binding ChartSeriesList01}" >
                                <dxc:LineSeries2D.MarkerModel>
                                    <dxc:RingMarker2DModel/>
                                </dxc:LineSeries2D.MarkerModel>
                            </dxc:LineSeries2D>
                            <dxc:BarSideBySideSeries2D Style="{StaticResource sBarSideBySideSeries2DBase}"
                                               DataSource="{Binding ChartSeriesList02}">
                            </dxc:BarSideBySideSeries2D>
                        </dxc:XYDiagram2D.Series>
                    </dxc:XYDiagram2D>
                </dxc:ChartControl.Diagram>
                <dxc:ChartControl.Legend>
                    <dxc:Legend Style="{StaticResource sLegendBase}"/>
                </dxc:ChartControl.Legend>
                <dxc:ChartControl.Titles>
                    <dxc:Title Style="{StaticResource sTitleBase}" />
                </dxc:ChartControl.Titles>
            </dxc:ChartControl>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--Pie 차트-->
    <DataTemplate DataType="{x:Type vm:CP_PieSeriesViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <dxc:ChartControl Style="{StaticResource sChartControlBase}">
                <dxc:ChartControl.Diagram>
                    <dxc:SimpleDiagram2D Style="{StaticResource sSimpleDiagram2D}">
                        <dxc:SimpleDiagram2D.Series>
                            <dxc:PieSeries2D Style="{StaticResource sPieSeries2DBase}">
                                <dxc:PieSeries2D.Label>
                                    <dxc:SeriesLabel Style="{StaticResource sPie_SeriesLabelBase}" />
                                </dxc:PieSeries2D.Label>
                                <dxc:PieSeries2D.Model>
                                    <dxc:FlatPie2DModel/>
                                </dxc:PieSeries2D.Model>
                            </dxc:PieSeries2D>
                        </dxc:SimpleDiagram2D.Series>
                    </dxc:SimpleDiagram2D>
                </dxc:ChartControl.Diagram>
                <dxc:ChartControl.Legend>
                    <dxc:Legend Style="{StaticResource sLegendBase}" />
                </dxc:ChartControl.Legend>
                <dxc:ChartControl.Titles>
                    <dxc:Title Style="{StaticResource sTitleBase}" />
                </dxc:ChartControl.Titles>
            </dxc:ChartControl>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--Scatter 차트-->
    <DataTemplate DataType="{x:Type vm:CP_ScatterChartViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <dxc:ChartControl Style="{StaticResource sChartControlBase}">
                <dxc:ChartControl.Diagram>
                    <dxc:XYDiagram2D Style="{StaticResource sXYDiagram2DBase}">
                        <dxc:XYDiagram2D.DefaultPane>
                            <dxc:Pane Style="{StaticResource sPaneBase}" />
                        </dxc:XYDiagram2D.DefaultPane>
                        <dxc:XYDiagram2D.AxisX>
                            <dxc:AxisX2D Style="{StaticResource sAxisX2DBase}" >
                                <dxc:AxisX2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisXLabelBase}" />
                                </dxc:AxisX2D.Label>
                                <dxc:AxisX2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisXTitleBase}" />
                                </dxc:AxisX2D.Title>
                                <dxc:AxisX2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisXRangeBase}"/>
                                </dxc:AxisX2D.WholeRange>
                            </dxc:AxisX2D>
                        </dxc:XYDiagram2D.AxisX>
                        <dxc:XYDiagram2D.AxisY>
                            <dxc:AxisY2D Style="{StaticResource sAxisY2DBase}">
                                <dxc:AxisY2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisYLabelBase}" />
                                </dxc:AxisY2D.Label>
                                <dxc:AxisY2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisYTitleBase}" />
                                </dxc:AxisY2D.Title>
                                <dxc:AxisY2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisYRangeBase}" />
                                </dxc:AxisY2D.WholeRange>
                            </dxc:AxisY2D>
                        </dxc:XYDiagram2D.AxisY>
                        <dxc:XYDiagram2D.Series>
                            <dxc:PointSeries2D Style="{StaticResource sPointSeries2DBase}">
                                <dxc:PointSeries2D.Label>
                                    <dxc:SeriesLabel Style="{StaticResource sSeriesLabelBase}"/>
                                </dxc:PointSeries2D.Label>
                                <dxc:PointSeries2D.MarkerModel>
                                    <dxc:RingMarker2DModel />
                                </dxc:PointSeries2D.MarkerModel>
                            </dxc:PointSeries2D>
                        </dxc:XYDiagram2D.Series>
                    </dxc:XYDiagram2D>
                </dxc:ChartControl.Diagram>
                <dxc:ChartControl.Legend>
                    <dxc:Legend Style="{StaticResource sLegendBase}" />
                </dxc:ChartControl.Legend>
                <dxc:ChartControl.Titles>
                    <dxc:Title Style="{StaticResource sTitleBase}"/>
                </dxc:ChartControl.Titles>
            </dxc:ChartControl>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--수직 막대형 차트-->
    <DataTemplate DataType="{x:Type vm:CP_VerticalGraphViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <dxc:ChartControl Style="{StaticResource sChartControlBase}">
                <dxc:ChartControl.Diagram>
                    <dxc:XYDiagram2D Style="{StaticResource sXYDiagram2DBase}">
                        <dxc:XYDiagram2D.AxisX>
                            <dxc:AxisX2D Style="{StaticResource sAxisX2DBase}">
                                <dxc:AxisX2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisXLabelBase}" />
                                </dxc:AxisX2D.Label>
                                <dxc:AxisX2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisXTitleBase}"/>
                                </dxc:AxisX2D.Title>
                                <dxc:AxisX2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisXRangeBase}"/>
                                </dxc:AxisX2D.WholeRange>
                            </dxc:AxisX2D>
                        </dxc:XYDiagram2D.AxisX>
                        <dxc:XYDiagram2D.AxisY>
                            <dxc:AxisY2D Style="{StaticResource sAxisY2DBase}">
                                <dxc:AxisY2D.CustomLabels>
                                    <dxc:CustomAxisLabel dxc:AxisY2D.AlwaysShowZeroLevel="False"
                                                 Value="{Binding DmComponentM.PropertyM.TextContent}">
                                        <TextBlock Style="{StaticResource FontSize14TextBlock}" 
                                           Text="{Binding Value}">
                                        </TextBlock>
                                    </dxc:CustomAxisLabel>
                                </dxc:AxisY2D.CustomLabels>
                                <dxc:AxisY2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisYLabelBase}" />
                                </dxc:AxisY2D.Label>
                                <dxc:AxisY2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisYTitleBase}" />
                                </dxc:AxisY2D.Title>
                                <dxc:AxisY2D.Strips>
                                    <dxc:Strip x:Name="MLimitStrip"
                                       Visible="{Binding DmComponentM.ResourceM.MLimitHigh, Converter={StaticResource LimitVisibleConverter}}"
                                       LegendText="{x:Static res:Res.StrControlLimit}"
                                       MinLimit="{Binding DmComponentM.ResourceM.MLimitHigh}"
                                       MaxLimit="{Binding DmComponentM.ResourceM.MLimitHigh}"
                                       BorderColor="Orange">
                                    </dxc:Strip>
                                    <dxc:Strip Visible="{Binding Visible, ElementName=MLimitStrip}"
                                       CheckedInLegend="{Binding CheckedInLegend, ElementName=MLimitStrip}"
                                       MaxLimit="{Binding DmComponentM.ResourceM.MLimitLow}"
                                       MinLimit="{Binding DmComponentM.ResourceM.MLimitLow}"
                                       BorderColor="Orange">
                                    </dxc:Strip>
                                    <dxc:Strip x:Name="LimitStrip"
                                       Visible="{Binding DmComponentM.ResourceM.LimitHigh, Converter={StaticResource LimitVisibleConverter}}"
                                       LegendText="{x:Static res:Res.StrLimit}"
                                       MaxLimit="{Binding DmComponentM.ResourceM.LimitHigh}"
                                       MinLimit="{Binding DmComponentM.ResourceM.LimitHigh}"
                                       BorderColor="Red">
                                    </dxc:Strip>
                                    <dxc:Strip Visible="{Binding Visible, ElementName=LimitStrip}"
                                       CheckedInLegend="{Binding CheckedInLegend, ElementName=LimitStrip}"
                                       MaxLimit="{Binding DmComponentM.ResourceM.LimitLow}"
                                       MinLimit="{Binding DmComponentM.ResourceM.LimitLow}"
                                       BorderColor="Red" >
                                    </dxc:Strip>
                                </dxc:AxisY2D.Strips>
                                <dxc:AxisY2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisYRangeBase}" />
                                </dxc:AxisY2D.WholeRange>
                            </dxc:AxisY2D>
                        </dxc:XYDiagram2D.AxisY>
                        <dxc:XYDiagram2D.DefaultPane>
                            <dxc:Pane Style="{StaticResource sPaneBase}" />
                        </dxc:XYDiagram2D.DefaultPane>
                        <dxc:BarSideBySideSeries2D Style="{StaticResource sBarSideBySideSeries2DBase}" >
                            <dxc:BarSideBySideSeries2D.Label>
                                <dxc:SeriesLabel Style="{StaticResource sBarSideBySideSeries2DSeriesLabelBase}" />
                            </dxc:BarSideBySideSeries2D.Label>
                        </dxc:BarSideBySideSeries2D>
                    </dxc:XYDiagram2D>
                </dxc:ChartControl.Diagram>
                <dxc:ChartControl.Legend>
                    <dxc:Legend Style="{StaticResource sLegendBase}"  Visible="True" Visibility="Visible"/>
                </dxc:ChartControl.Legend>
                <dxc:ChartControl.Titles>
                    <dxc:Title Style="{StaticResource sTitleBase}" />
                </dxc:ChartControl.Titles>
            </dxc:ChartControl>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--Xbar 차트-->
    <DataTemplate DataType="{x:Type vm:CP_XbarChartViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <dxc:ChartControl Style="{StaticResource sChartControlBase}">
                <dxc:ChartControl.Diagram>
                    <dxc:XYDiagram2D Style="{StaticResource sXYDiagram2DBase}">
                        <dxc:XYDiagram2D.DefaultPane>
                            <dxc:Pane Style="{StaticResource sPaneBase}" />
                        </dxc:XYDiagram2D.DefaultPane>
                        <dxc:XYDiagram2D.AxisX>
                            <dxc:AxisX2D Style="{StaticResource sAxisX2DBase}">
                                <dxc:AxisX2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisXTitleBase}" />
                                </dxc:AxisX2D.Title>
                                <dxc:AxisX2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisXLabelBase}" />
                                </dxc:AxisX2D.Label>
                                <dxc:AxisX2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisXRangeBase}"/>
                                </dxc:AxisX2D.WholeRange>
                            </dxc:AxisX2D>
                        </dxc:XYDiagram2D.AxisX>
                        <dxc:XYDiagram2D.AxisY>
                            <dxc:AxisY2D Style="{StaticResource sAxisY2DBase}">
                                <dxc:AxisY2D.Label>
                                    <dxc:AxisLabel Style="{StaticResource sAxisYLabelBase}" />
                                </dxc:AxisY2D.Label>
                                <dxc:AxisY2D.Strips>
                                    <dxc:Strip LegendText="UCL"
                                       MinLimit="90"
                                       MaxLimit="90" 
                                       BorderColor="Red"
                                       AxisLabelText="UCL">
                                    </dxc:Strip>
                                    <dxc:Strip LegendText="CL"
                                           MinLimit="53"
                                           MaxLimit="53" 
                                           BorderColor="GreenYellow"
                                           AxisLabelText="CL">
                                    </dxc:Strip>
                                    <dxc:Strip LegendText="LCL"
                                       MinLimit="10"
                                       MaxLimit="10" 
                                       BorderColor="Red"
                                       AxisLabelText="LCL">
                                    </dxc:Strip>
                                </dxc:AxisY2D.Strips>
                                <dxc:AxisY2D.Title>
                                    <dxc:AxisTitle Style="{StaticResource sAxisYTitleBase}"/>
                                </dxc:AxisY2D.Title>
                                <dxc:AxisY2D.WholeRange>
                                    <dxc:Range Style="{StaticResource sAxisYRangeBase}" MaxValue="91"/>
                                </dxc:AxisY2D.WholeRange>
                            </dxc:AxisY2D>
                        </dxc:XYDiagram2D.AxisY>
                        <dxc:LineSeries2D Style="{StaticResource sLineSeries2DBase}" />
                    </dxc:XYDiagram2D>
                </dxc:ChartControl.Diagram>
                <dxc:ChartControl.Legend>
                    <dxc:Legend Style="{StaticResource sLegendBase}" />
                </dxc:ChartControl.Legend>
                <dxc:ChartControl.Titles>
                    <dxc:Title Style="{StaticResource sTitleBase}"/>
                </dxc:ChartControl.Titles>
            </dxc:ChartControl>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--애니메이션-->
    <DataTemplate DataType="{x:Type vm:CP_AnimationViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Border Style="{StaticResource xBorder_Animation}">
                <Grid>
                    <TextBlock x:Name="xColorChange" Background="{x:Null}">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource xTextBlockBase}">
                                <Setter Property="Foreground" Value="{Binding DmComponentM.PropertyM.AnimationM.Brush}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DmComponentM.PropertyM.AnimationM.BrushAlarmVisibility}" Value="True">
                                        <Setter Property="Foreground" Value="{Binding DmComponentM.PropertyM.AlarmState, Converter={StaticResource xAlarmStateColorConverter}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding DmComponentM.PropertyM.AlarmState}" Value="{x:Null}">
                                        <Setter Property="Foreground" Value="{Binding DmComponentM.PropertyM.AnimationM.Brush}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <Image x:Name="xImage">
                        <Image.Source>
                            <DrawingImage >
                                <DrawingImage.Drawing>
                                    <DrawingGroup ClipGeometry="M0,0 V1276 H1280 V0 H0 Z">
                                        <DrawingGroup Opacity="{Binding DmComponentM.PropertyM.AnimationM.Opacity}" Transform="0.1,0,0,-0.1,0,1276">
                                            <GeometryDrawing Brush="{Binding ElementName=xColorChange, Path=Foreground}" Geometry="F1 M1280,1276z M0,0z M5975,12749C5889,12743 5831,12735 5824,12727 5818,12721 5788,12632 5757,12530 5727,12428 5638,12134 5560,11875 5482,11617 5404,11359 5387,11304L5357,11202 5169,11156C4956,11104 4694,11021 4511,10948 4443,10921 4381,10901 4374,10904 4367,10907 4073,11125 3721,11389 3368,11654 3077,11870 3072,11870 3061,11870 2822,11725 2710,11650 2504,11513 2288,11351 2102,11194L2077,11173 2348,10427C2498,10016 2620,9675 2620,9669 2620,9663 2580,9613 2532,9557 2357,9355 2195,9137 2075,8942 2043,8890 2011,8846 2003,8843 1995,8840 1637,8847 1207,8859 777,8871 413,8880 399,8880 376,8880 369,8871 343,8813 282,8676 201,8460 141,8275 80,8089 -4,7781 3,7773 5,7771 306,7569 671,7325 1233,6948 1336,6875 1341,6852 1344,6837 1342,6780 1337,6725 1329,6626 1335,6200 1348,6023L1355,5931 687,5483C319,5237 14,5033 9,5030 0,5024 31,4884 81,4710 152,4461 261,4156 365,3916L382,3877 523,3883C601,3887,966,3897,1333,3907L2001,3924 2026,3895C2039,3878 2094,3800 2146,3721 2259,3552 2368,3407 2496,3254L2589,3143 2314,2391C2163,1977 2040,1634 2042,1630 2047,1616 2255,1445 2403,1334 2628,1164 3009,916 3034,922 3041,924 3333,1141 3683,1404L4320,1883 4367,1868C4394,1859 4451,1838 4495,1820 4678,1746 4887,1679 5114,1620 5195,1599 5263,1580 5265,1578 5268,1575 5487,854 5651,305 5689,179 5724,66 5729,54 5737,36 5753,32 5866,21 6180,-9 6944,-1 6976,33 6982,40 7012,128 7043,230 7073,332 7162,626 7240,885 7318,1144 7396,1401 7413,1456L7443,1558 7631,1604C7844,1656 8106,1739 8289,1812 8357,1839 8419,1859 8426,1856 8433,1853 8727,1635 9079,1371 9432,1106 9723,890 9728,890 9739,890 9978,1035 10090,1110 10296,1247 10512,1409 10698,1566L10723,1587 10452,2333C10302,2744 10180,3085 10180,3091 10180,3097 10220,3147 10268,3203 10443,3405 10605,3623 10725,3818 10757,3870 10789,3914 10797,3917 10805,3920 11163,3913 11593,3901 12023,3889 12387,3880 12401,3880 12424,3880 12431,3889 12457,3948 12518,4084 12599,4300 12659,4485 12720,4671 12804,4979 12797,4987 12795,4989 12494,5191 12129,5435 11567,5812 11464,5885 11459,5908 11456,5923 11458,5980 11463,6035 11471,6134 11465,6562 11452,6737L11445,6829 12113,7277C12481,7523 12786,7727 12791,7730 12800,7736 12769,7876 12719,8050 12648,8299 12539,8604 12435,8844L12418,8883 12277,8877C12199,8873,11834,8863,11467,8853L10799,8836 10774,8865C10761,8882 10706,8960 10654,9039 10541,9208 10432,9353 10304,9506L10211,9617 10486,10369C10637,10783 10760,11126 10758,11130 10753,11144 10545,11315 10397,11426 10172,11596 9791,11844 9766,11838 9759,11836 9467,11619 9117,11356L8480,10877 8433,10892C8406,10901 8349,10922 8305,10940 8122,11014 7913,11081 7686,11140 7605,11161 7537,11180 7535,11182 7532,11185 7313,11906 7149,12455 7111,12582 7076,12694 7071,12706 7063,12724 7047,12728 6934,12739 6770,12755 6159,12761 5975,12749z M8228,9830C8301,9791 8343,9747 8379,9670 8401,9624 8405,9601 8405,9530 8405,9457 8401,9437 8377,9388 8345,9323 8282,9263 8212,9229 8142,9195 8014,9191 7938,9220 7679,9317 7644,9676 7880,9818 7956,9863 7982,9870 8080,9867 8154,9864 8173,9860 8228,9830z M6642,8405C7049,8358 7391,8221 7715,7977 7891,7844 8122,7585 8229,7402 8406,7096 8493,6808 8520,6433 8530,6305 8529,6263 8515,6163 8470,5830 8363,5545 8181,5273 7744,4619 6956,4261 6158,4355 5751,4402 5409,4539 5085,4783 4909,4916 4678,5175 4571,5358 4394,5664 4307,5952 4280,6327 4270,6455 4271,6497 4285,6597 4318,6838 4375,7032 4475,7236 4749,7799 5247,8199 5865,8355 6109,8417 6388,8435 6642,8405z M3294,8271C3476,8182 3540,7971 3437,7799 3375,7696 3264,7636 3135,7637 2942,7639 2800,7781 2798,7975 2795,8223 3066,8384 3294,8271z M9783,5104C9914,5058 10001,4931 10002,4783 10003,4721 9998,4701 9971,4646 9934,4571 9879,4518 9801,4482 9720,4444 9599,4444 9519,4481 9440,4518 9386,4571 9348,4648 9319,4706 9315,4725 9315,4791 9315,4856 9320,4876 9348,4933 9427,5092 9611,5165 9783,5104z M4864,3539C4937,3512 5012,3443 5047,3372 5071,3322 5075,3303 5075,3225 5075,3152 5071,3126 5052,3089 5018,3019 4968,2967 4898,2929 4838,2897 4830,2895 4735,2895 4640,2895 4632,2897 4572,2929 4498,2969 4456,3014 4422,3088 4339,3270 4427,3473 4618,3542 4685,3566 4795,3565 4864,3539z" />
                                        </DrawingGroup>
                                    </DrawingGroup>
                                </DrawingImage.Drawing>
                            </DrawingImage>
                        </Image.Source>
                        <Image.Style>
                            <Style TargetType="{x:Type Image}" BasedOn="{StaticResource xImage_Animation}">
                                <Setter Property="RenderTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="0"/>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DmComponentM.PropertyM.AlarmState}" Value="0">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard Name="storyboard0">
                                                <Storyboard >
                                                    <DoubleAnimation Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
                                                                     RepeatBehavior="Forever"
                                                                     From="0.0" To="360" Duration="0:0:3" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <StopStoryboard BeginStoryboardName="storyboard0"/>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding DmComponentM.PropertyM.AlarmState}" Value="1">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard Name="storyboard1">
                                                <Storyboard >
                                                    <DoubleAnimation Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
                                                                     RepeatBehavior="Forever"
                                                                     From="0.0" To="360" Duration="0:0:15" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <StopStoryboard BeginStoryboardName="storyboard1"/>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>

                    <Popup Style="{StaticResource xPopup_Animation}"
                           IsOpen="{Binding ElementName=xImage, Path=IsMouseOver, Mode=OneWay}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Opened">
                                <prism:InvokeCommandAction Command="{Binding OpenedCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <ContentControl Content="{Binding DetailInfoVM }" />
                    </Popup>
                </Grid>
            </Border>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--상세 정보-->
    <DataTemplate DataType="{x:Type vm:CP_DetailInformationViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="10" />
                </Grid.RowDefinitions>

                <Label Grid.Row="0" 
               Style="{StaticResource xDetailInfoLabelTemplate}"/>

                <Border Grid.Row="1" 
                Background="{Binding DmComponentM.PropertyM.DetailInfoM.Background}"
                Opacity="{Binding DmComponentM.PropertyM.DetailInfoM.Opacity}">
                    <Image Height="80" Source="{StaticResource bla_ic_setDrawingImage}" />
                </Border>

                <ListView Grid.Row="2" 
                  Style="{StaticResource xDetailInfoListViewTemplate}"
                  ItemContainerStyle="{StaticResource xDetailInfoListViewItemTemplate}">
                    <ListView.View>
                        <GridView ColumnHeaderContainerStyle="{StaticResource myHeaderStyle}">
                            <GridViewColumn Width="{Binding Path=DataContext.DmComponentM.PropertyM.DetailInfoTitleM.Width, RelativeSource={RelativeSource AncestorType=ListView}}">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Style="{StaticResource xTextBlock_DetailInfoTitle}"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="{Binding Path=DataContext.DmComponentM.PropertyM.DetailInfoValueM.Width, RelativeSource={RelativeSource AncestorType=ListView}}" >
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Style="{StaticResource xTextBlock_DetailInfoValue}"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                </ListView>

                <Rectangle Grid.Row="3" Fill="{Binding DmComponentM.PropertyM.DetailInfoM.Background}" />
            </Grid>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>    
        
    <!--DataGrid-->
    <DataTemplate DataType="{x:Type vm:CP_DataGridViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Grid>
                <Border x:Name="BDRounded" Background="#FF252526" />
                <DataGrid Style="{StaticResource xDataGrid_Component}"
                          ItemsSource="{Binding DmComponentM.DataGridList}"
                          CellStyle="{StaticResource xDataGridCell_Component}"
                          ColumnHeaderStyle="{StaticResource xDataGridColumnHeader_Component}"
                          RowStyle="{StaticResource xDataGridRow_Component}" >
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="AutoGeneratedColumns">
                            <prism:InvokeCommandAction Command="{Binding AutoGeneratedColumnsCommand}"
                                                       CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="AutoGeneratingColumn">
                            <prism:InvokeCommandAction Command="{Binding AutoGeneratingColumnCommand}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="LoadingRow">
                            <prism:InvokeCommandAction Command="{Binding LoadingRowCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="{x:Static res:Res.StrAbnormalState}" 
                                            Binding="{Binding Path=이상이력, Converter={StaticResource xAlarmStateStrConverter}}"
                                            CellStyle="{StaticResource xDataGridCell_Shape}"
                                            Width="100">
                        </DataGridTextColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </Grid>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--알람 상태-->
    <DataTemplate DataType="{x:Type vm:CP_AlarmStateViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Rectangle x:Name="xAlarmStateRectangle" Style="{StaticResource xAlarmStateRectangleTemplate}"/>
            <Popup Placement="Right"
                   HorizontalOffset="10"
                   IsOpen="{Binding ElementName=xAlarmStateRectangle, Path=IsMouseOver, Mode=OneWay}"
                   AllowsTransparency="True"
                   PopupAnimation="Fade" 
                   Visibility="Visible" >
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Opened">
                        <prism:InvokeCommandAction Command="{Binding OpenedCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <ContentControl Content="{Binding DetailInfoVM }" />
            </Popup>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>

    <!--알람 이상 이력-->
    <DataTemplate DataType="{x:Type vm:CP_AlarmHistoryViewModel}">
        <Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding ComponentPreviewMouseLeftButtonUpCommand}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <prism:InvokeCommandAction Command="{Binding ComponentMouseLeftButtonDownCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="8"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="8"/>
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition Height="36"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <TextBlock Grid.Column="1" Grid.Row="0" 
                   Style="{StaticResource FontSize12TextBlock}" 
                   Text="{x:Static res:Res.StrAlarmState}">

                </TextBlock>

                <ListView Grid.Column="1" Grid.Row="1" 
                  x:Name="listbox_alarm"
                  Style="{StaticResource xResourceAbnormalListView}"
                  ItemsSource="{Binding DmComponentM.DmAlarmStatusList}">
                    <!--<ListView.Resources>
                        <mvvm:Triggers x:Key="ItemContainerEvent" x:Shared="False">
                            <i:EventTrigger EventName="MouseDoubleClick">
                                <prism:InvokeCommandAction Command="{Binding AlarmDoubleClickCommand, ElementName=listbox_alarm}"/>
                            </i:EventTrigger>
                        </mvvm:Triggers>
                    </ListView.Resources>
                    <ListView.ItemContainerStyle>
                        <Style TargetType="{x:Type ListViewItem}">
                            <Setter Property="mvvm:SupplementaryInteraction.Triggers" Value="{StaticResource ItemContainerEvent}"/>
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="Padding" Value="0" />
                        </Style>
                    </ListView.ItemContainerStyle>-->
                    <ListView.ItemContainerStyle>
                        <Style TargetType="{x:Type ListViewItem}">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="Padding" Value="0" />
                        </Style>
                    </ListView.ItemContainerStyle>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <control:AlarmHistoryItem Tag="{Binding DataContext, ElementName=listbox_alarm}" />
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ListView>
            </Grid>

            <!-- Component Move -->
            <extensions:MoveThumb x:Name="MoveDecorator" 
                                  TargetElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Stretch"
                                  HorizontalAlignment="Stretch"
                                  Cursor="SizeAll"  
                                  Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContextMenu="{Binding Path=(extensions:EditModeExtension.ContextMenu), RelativeSource={RelativeSource TemplatedParent}}">
                <extensions:MoveThumb.Style>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Rectangle Fill="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </extensions:MoveThumb.Style>
            </extensions:MoveThumb>

            <!-- Component Resize -->
            <Control x:Name="ResizeDecorator"
                     DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" >
                <Control.Style>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Control}">
                                    <Grid SnapsToDevicePixels="True" >
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="2" Cursor="SizeWE" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Height="2" Cursor="SizeNS" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Top" HorizontalAlignment="Right"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNESW" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                                        <extensions:ResizeThumb Width="6" Height="6" Cursor="SizeNWSE" Margin="-2" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static mstatic:MapFrameViewModel.Instance}, Path=IsMapEdit}" Value="true">
                                <Setter Property="Visibility" Value="{Binding Path=DataContext.DmComponentM.IsSelectMode}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>
        </Grid>
    </DataTemplate>
  

</ResourceDictionary>